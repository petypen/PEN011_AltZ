&НаКлиенте
Перем мСписокПользователейИБ;

&НаКлиенте
Перем мПользовательИБ;


&НаКлиентеНаСервереБезКонтекста
Функция вЗначениеВМассив(Знач Значение)
	Массив = новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	_ПолноеИмяХ = Параметры.ПолноеИмя;
	
	пМассив = СтрРазделить(_ПолноеИмяХ, ".");
	
	_ПолноеИмя = пМассив[0] + "." + пМассив[1];
	
	Заголовок = _ПолноеИмя;
	
	вЗаполнитьСвойстваВИД();
	
	пСписок = Элементы._СУБД.СписокВыбора;
	
	пСписок.Добавить("MSSQLServer");
	пСписок.Добавить("PostgreSQL");
	пСписок.Добавить("IBMDB2");
	пСписок.Добавить("OracleDatabase");
	пСписок.Добавить("MySQL");
	пСписок.Добавить("MSSQLServerAnalysisServices");
	пСписок.Добавить("OracleEssbase");
	пСписок.Добавить("IBMInfosphereWarehouse");
	пСписок.Добавить("Прочее");
	
	вЗаполнитьРазделСтруктураХранения();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мПользовательИБ = вПолучитьТекущегоПользователя();
	
	_ПолучитьСостояние(Неопределено);
	_ПолучитьОбщиеПараметрыСоединения(Неопределено);
	
	вПерейтиКОбъекту(_ПолноеИмяХ);
КонецПроцедуры


&НаКлиенте
Процедура вПерейтиКОбъекту(Знач пПолноеИмяобъекта) Экспорт
	Если СтрНайти(пПолноеИмяобъекта, ".Таблица.") <> 0 Тогда
		пМассив = СтрРазделить(пПолноеИмяобъекта, ".");
		пИмя = пМассив[3];
		
		пСтроки = _Таблицы.НайтиСтроки(новый Структура("Имя", пИмя));
		Если пСтроки.Количество() <> 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТаблицы;
			Элементы._Таблицы.ТекущаяСтрока = пСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваВИД()
	пОбъектМД = Метаданные.НайтиПоПолномуИмени(_ПолноеИмя);
	
	_Имя = пОбъектМД.Имя;
	_Синоним = пОбъектМД.Синоним;
	_Комментарий = пОбъектМД.Комментарий;
	
	пНомерТаблицы = 0;
	
	Для каждого Элем из пОбъектМД.Таблицы Цикл
		пНомерТаблицы = пНомерТаблицы + 1;
		пНомерТаблицыХ = "(" + пНомерТаблицы + ")";
		
		НС = _Таблицы.Добавить();
		НС.НомерТаблицы = пНомерТаблицыХ;
		НС.Имя = Элем.Имя;
		НС.Представление = Элем.Представление();
		НС.ИмяВИсточникеДанных = Элем.ИмяВИсточникеДанных;
		НС.Расширение = (Элем.РасширениеКонфигурации() <> Неопределено);
		
		пМассив = новый Массив;
		Для каждого пПоле из Элем.ПоляКлюча Цикл
			пМассив.Добавить(пПоле.Имя);
		КонецЦикла;
		
		Если пМассив.Количество() <> 0 Тогда
			НС.ПоляКлюча = СтрСоединить(пМассив, ", ");
		КонецЕсли;
		
		Для каждого пПоле из Элем.Поля Цикл
			НС = _ТаблицыПоля.Добавить();
			НС.НомерТаблицы = пНомерТаблицыХ;
			НС.Имя = пПоле.Имя;
			НС.Представление = пПоле.Представление();
			НС.ИмяВИсточникеДанных = пПоле.ИмяВИсточникеДанных;
			НС.ТипПоля = вОписаниеТиповВСтроку(пПоле.Тип);
			НС.Расширение = (пПоле.РасширениеКонфигурации() <> Неопределено);
		КонецЦикла;
	КонецЦикла;
	
	_Таблицы.Сортировать("Имя");
	_ТаблицыПоля.Сортировать("НомерТаблицы, Имя");
КонецПроцедуры

&НаКлиенте
Процедура _ПараметрСоединенияПриИзменении(Элемент)
	ЭтаФорма[Элемент.Имя + "_"] = истина;
КонецПроцедуры

&НаКлиенте
Процедура _РазорватьСоединение(Команда)
	Если вПолучитьСостояние(_Имя) Тогда
		ПоказатьВопрос(новый ОписаниеОповещения("вРазорватьСоединение_Ответ", ЭтаФорма), "Соединение будет разорвано! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вРазорватьСоединение_Ответ(РезультатВопроса, пДопПарам = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		вРазорватьСоединение(_Имя);
		_ПолучитьСостояние(Неопределено);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _УстановитьСоединение(Команда)
	Если не вПолучитьСостояние(_Имя) Тогда
		вУстановитьСоединение(_Имя);
		_ПолучитьСостояние(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вРазорватьСоединение(Знач пИмя)
	ВнешниеИсточникиДанных[пИмя].РазорватьСоединение();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вУстановитьСоединение(Знач пИмя)
	ВнешниеИсточникиДанных[пИмя].УстановитьСоединение();
КонецПроцедуры


&НаКлиенте
Процедура _ПолучитьСостояние(Команда)
	Элементы.ДекорацияСостояние.Заголовок = ?(вПолучитьСостояние(_Имя), "Подключен", "Отключен");
КонецПроцедуры

&НаКлиенте
Процедура _ПолучитьОбщиеПараметрыСоединения(Команда)
	Элементы.ГруппаПараметры.Заголовок = "Общие параметры соединения";
	
	_ПараметрыСоединения = вПолучитьПараметрыСоединеия("О", _Имя);
	вОтобразитьПараметрыСоединения();
КонецПроцедуры

&НаКлиенте
Процедура _ПолучитьПараметрыСоединенияСеанса(Команда)
	Элементы.ГруппаПараметры.Заголовок = "Параметры соединения сеанса";
	_ПараметрыСоединения = вПолучитьПараметрыСоединеия("С", _Имя);
	вОтобразитьПараметрыСоединения();
КонецПроцедуры

&НаКлиенте
Процедура _ПолучитьПараметрыСоединенияПользователя(Команда)
	Если мСписокПользователейИБ = Неопределено Тогда
		пМассив = вПолучитьПользователейИБ();
		Если пМассив.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		мСписокПользователейИБ = новый СписокЗначений;
		мСписокПользователейИБ.ЗагрузитьЗначения(пМассив);
	КонецЕсли;
	
	пЭлемент = ?(мПользовательИБ <> Неопределено, мСписокПользователейИБ.НайтиПоЗначению(мПользовательИБ), Неопределено);
	мСписокПользователейИБ.ПоказатьВыборЭлемента(новый ОписаниеОповещения("вОбработатьВыборПользователяИБ", ЭтаФорма), "Пользователи", пЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборПользователяИБ(ВыбранныйЭлемент, пДопПарам = Неопределено) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		мПользовательИБ = ВыбранныйЭлемент.Значение;
		
		Элементы.ГруппаПараметры.Заголовок = "Параметры соединения пользователя";
		_ПараметрыСоединения = вПолучитьПараметрыСоединеия("П", _Имя, мПользовательИБ);
		вОтобразитьПараметрыСоединения();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _УстановитьПараметрыСоединения(Команда)
	ПоказатьВопрос(новый ОписаниеОповещения("вУстановитьПараметрыСоединения_Ответ", ЭтаФорма), "Параметры соединения будут изменены! Продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вУстановитьПараметрыСоединения_Ответ(РезультатВопроса, пДопПарам = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		пСтрук = вСформироватьСтруктуруПараметровСоединения();
		ЗаполнитьЗначенияСвойств(пСтрук, _ПараметрыСоединения);
		
		Для каждого Элем из _ПараметрыСоединения Цикл
			Если Элементы.Найти("_" + Элем.Ключ) <> Неопределено Тогда
				Если ЭтаФорма["_" + Элем.Ключ + "_"] Тогда
					пСтрук[Элем.Ключ] = ЭтаФорма["_" + Элем.Ключ];
				Иначе
					пСтрук[Элем.Ключ] = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если пСтрук.СУБД <> Неопределено Тогда
			Если пСтрук.СУБД = "Прочее" Тогда
				пСтрук.СУБД = "";
			КонецЕсли;
		КонецЕсли;
		
		Если вУстановитьПараметрыСоединения(_Имя, пСтрук) Тогда
			_ПараметрыСоединения = вПолучитьПараметрыСоединеия(пСтрук._Режим, _Имя, пСтрук._ПользовательИБ);
			вОтобразитьПараметрыСоединения();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОтобразитьПараметрыСоединения()
	Для каждого Элем из _ПараметрыСоединения Цикл
		Если Элементы.Найти("_" + Элем.Ключ) <> Неопределено Тогда
			ЭтаФорма["_" + Элем.Ключ] = Элем.Значение;
			ЭтаФорма["_" + Элем.Ключ + "_"] = (Элем.Значение <> Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Если _ПараметрыСоединения.СУБД = "" Тогда
		_СУБД = "Прочее";
	КонецЕсли;
	
	Если _ПараметрыСоединения.ПарольУстановлен Тогда
		_Пароль_ = истина;
	КонецЕсли;
	
	_ПользовательИБ = _ПараметрыСоединения._ПользовательИБ;
	Элементы._ПользовательИБ.Видимость = (_ПараметрыСоединения._Режим = "П");
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция вСформироватьСтруктуруПараметровСоединения()
	пСтрук = новый Структура("
		|_Режим,
		|_ПользовательИБ,
		|АутентификацияОС,
		|АутентификацияСтандартная,
		|ИмяПользователя,
		|Пароль,
		|ПарольУстановлен,
		|СтрокаСоединения,
		|СУБД"
	);
	
	Возврат пСтрук;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСостояние(Знач пИмяВИД)
	пСостояние = ВнешниеИсточникиДанных[пИмяВИД].ПолучитьСостояние();
	
	Возврат (пСостояние = СостояниеВнешнегоИсточникаДанных.Подключен);
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПараметрыСоединеия(Знач пРежим, Знач пИмяВИД, Знач пПользовательИБ = "")
	
	Если пРежим = "О" Тогда
		пРезультат = ВнешниеИсточникиДанных[пИмяВИД].ПолучитьОбщиеПараметрыСоединения();
	ИначеЕсли пРежим = "С" Тогда
		пРезультат = ВнешниеИсточникиДанных[пИмяВИД].ПолучитьПараметрыСоединенияСеанса();
	ИначеЕсли пРежим = "П" Тогда
		пРезультат = ВнешниеИсточникиДанных[пИмяВИД].ПолучитьПараметрыСоединенияПользователя(пПользовательИБ);
	КонецЕсли;
	
	пСтрук = вСформироватьСтруктуруПараметровСоединения();
	
	ЗаполнитьЗначенияСвойств(пСтрук, пРезультат,,"Пароль");
	
	пСтрук._Режим = пРежим;
	пСтрук._ПользовательИБ = пПользовательИБ;
	
	Возврат пСтрук;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПользователейИБ()
	пРезультат = новый Массив;
	
	Для каждого Элем из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		пРезультат.Добавить(Элем.Имя);
	КонецЦикла;
	
	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьТекущегоПользователя()
	пЗначение = ПользователиИнформационнойБазы.ТекущийПользователь();
	Возврат ?(пЗначение = Неопределено, Неопределено, пЗначение.Имя);
КонецФункции

&НаСервереБезКонтекста
Функция вУстановитьПараметрыСоединения(Знач пИмяВИД, Знач пСтрук)
	пПараметрыСоединения = новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	ЗаполнитьЗначенияСвойств(пПараметрыСоединения, пСтрук,,"ПарольУстановлен");
	
	Попытка
		Если пСтрук._Режим = "О" Тогда
			ВнешниеИсточникиДанных[пИмяВИД].УстановитьОбщиеПараметрыСоединения(пПараметрыСоединения);
		ИначеЕсли пСтрук._Режим = "С" Тогда
			ВнешниеИсточникиДанных[пИмяВИД].УстановитьПараметрыСоединенияСеанса(пПараметрыСоединения);
		ИначеЕсли пСтрук._Режим = "П" Тогда
			ВнешниеИсточникиДанных[пИмяВИД].УстановитьПараметрыСоединенияПользователя(пСтрук._ПользовательИБ, пПараметрыСоединения);
		КонецЕсли;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ложь;
	КонецПопытки;
	
	Возврат истина;
КонецФункции


&НаКлиенте
Процедура _ТаблицыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("вТаблицыПриАктивизацииСтроки", 0.1, истина);
КонецПроцедуры

&НаКлиенте
Процедура вТаблицыПриАктивизацииСтроки()
	ТекДанные = Элементы._Таблицы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Элементы._ТаблицыПоля.ОтборСтрок = новый ФиксированнаяСтруктура("НомерТаблицы", ТекДанные.НомерТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	_ОткрытьФормуСпискаТаблицы(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ОткрытьФормуСпискаТаблицы(Команда)
	ТекДанные = Элементы._Таблицы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пИмяФормы = СтрШаблон("ВнешнийИсточникДанных.%1.Таблица.%2.ФормаСписка", _Имя, ТекДанные.Имя);
		ОткрытьФорму(пИмяФормы);
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция вСформироватьСтруктуруТипов()
	Результат = новый Структура;
	
	Результат.Вставить("мТипСтрока"					,Тип("Строка"));
	Результат.Вставить("мТипБулево"					,Тип("Булево"));
	Результат.Вставить("мТипЧисло"					,Тип("Число"));
	Результат.Вставить("мТипДата"					,Тип("Дата"));
	Результат.Вставить("мТипСтруктура"				,Тип("Структура"));
	Результат.Вставить("мТипХранилищеЗначения"		,Тип("ХранилищеЗначения"));
	Результат.Вставить("мТипДвоичныеДанные"			,Тип("ДвоичныеДанные"));
	Результат.Вставить("мТипДеревоЗначений"			,Тип("ДеревоЗначений"));
	Результат.Вставить("мТипОбъектМетаданных"		,Тип("ОбъектМетаданных"));
	Результат.Вставить("мТипУникальныйИдентификатор",Тип("УникальныйИдентификатор"));
	
	Результат.Вставить("мТипNULL"						,Тип("NULL"));
	Результат.Вставить("мТипНЕОПРЕДЕЛЕНО"				,Тип("НЕОПРЕДЕЛЕНО"));
	Результат.Вставить("мТипОписаниеТипов"				,Тип("ОписаниеТипов"));
	Результат.Вставить("мТипВидДвиженияБухгалтерии"		,Тип("ВидДвиженияБухгалтерии"));
	Результат.Вставить("мТипВидДвиженияНакопления"		,Тип("ВидДвиженияНакопления"));
	Результат.Вставить("мТипВидСчета"					,Тип("ВидСчета"));
	Результат.Вставить("мТипФиксированныйМассив"		,Тип("ФиксированныйМассив"));
	Результат.Вставить("мТипФиксированнаяСтруктура"		,Тип("ФиксированнаяСтруктура"));
	Результат.Вставить("мТипФиксированноеСоответствие"	,Тип("ФиксированноеСоответствие"));
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция вТипВСтроку(СтрукТипы, Тип, ОписаниеТипов)
	ИмяТипа = "";
	
	Если Тип = СтрукТипы.мТипЧисло Тогда
		ИмяТипа = "Число";
		Если ОписаниеТипов.КвалификаторыЧисла.Разрядность <> 0 Тогда
			ИмяТипа = ИмяТипа + "("
				+ ОписаниеТипов.КвалификаторыЧисла.Разрядность + "."
				+ ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")";
		КонецЕсли;
	ИначеЕсли Тип = СтрукТипы.мТипСтрока Тогда
		ИмяТипа = "Строка";
		Если ОписаниеТипов.КвалификаторыСтроки.Длина <> 0 Тогда
			ИмяТипа = ИмяТипа + "("
				+ ?(ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "П", "Ф")
				+ ОписаниеТипов.КвалификаторыСтроки.Длина + ")";
		КонецЕсли;
	ИначеЕсли Тип = СтрукТипы.мТипДата Тогда
		ИмяТипа = ?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время, "Время",
			?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Дата", "ДатаВремя"));
	ИначеЕсли Тип = СтрукТипы.мТипБулево Тогда
		ИмяТипа = "Булево";
	ИначеЕсли Тип = СтрукТипы.мТипДвоичныеДанные Тогда
		ИмяТипа = "ДвоичныеДанные";
	ИначеЕсли Тип = СтрукТипы.мТипХранилищеЗначения Тогда
		ИмяТипа = "ХранилищеЗначения";
	ИначеЕсли Тип = СтрукТипы.мТипУникальныйИдентификатор Тогда
		ИмяТипа = "УникальныйИдентификатор";
		
	ИначеЕсли Тип = СтрукТипы.мТипNULL Тогда
		ИмяТипа = "NULL";
	ИначеЕсли Тип = СтрукТипы.мТипНЕОПРЕДЕЛЕНО Тогда
		ИмяТипа = "НЕОПРЕДЕЛЕНО";
	ИначеЕсли Тип = СтрукТипы.мТипОписаниеТипов Тогда
		ИмяТипа = "ОписаниеТипов";
	ИначеЕсли Тип = СтрукТипы.мТипВидДвиженияБухгалтерии Тогда
		ИмяТипа = "ВидДвиженияБухгалтерии";
	ИначеЕсли Тип = СтрукТипы.мТипВидДвиженияНакопления Тогда
		ИмяТипа = "ВидДвиженияНакопления";
	ИначеЕсли Тип = СтрукТипы.мТипВидСчета Тогда
		ИмяТипа = "ВидСчета";
	ИначеЕсли Тип = СтрукТипы.мТипФиксированныйМассив Тогда
		ИмяТипа = "ФиксированныйМассив";
	ИначеЕсли Тип = СтрукТипы.мТипФиксированнаяСтруктура Тогда
		ИмяТипа = "ФиксированнаяСтруктура";
	ИначеЕсли Тип = СтрукТипы.мТипФиксированноеСоответствие Тогда
		ИмяТипа = "ФиксированноеСоответствие";
		
	Иначе
		ОбъектМД = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМД <> Неопределено Тогда
			ИмяТипа = ОбъектМД.ПолноеИмя();
		Иначе
			ИмяТипа = Строка(Тип);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяТипа;
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТиповВСтроку(ОписаниеТипов)
	Если ОписаниеТипов = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрукТипы = вСформироватьСтруктуруТипов();
	
	Значение = "";
	пМассивСтрок = новый Массив;
	
	Типы = ОписаниеТипов.Типы();
	Для каждого Элем из Типы Цикл
		ИмяТипа = вТипВСтроку(СтрукТипы, Элем, ОписаниеТипов);
		Если не ПустаяСтрока(ИмяТипа) Тогда
			пМассивСтрок.Добавить(ИмяТипа);
		КонецЕсли;
	КонецЦикла;
	
	Если пМассивСтрок.Количество() <> 0 Тогда
		Значение = СтрСоединить(пМассивСтрок, ",");
	КонецЕсли;
	
	Возврат Значение;
КонецФункции


// структура хранения

&НаКлиенте
Процедура _ПоказыватьСтруктуруХраненияВТерминах1СПриИзменении(Элемент)
	_СХИндексы.Очистить();
	_СХПоля.Очистить();
	_СХПоляИндексов.Очистить();
	_СХТаблицы.Очистить();
	
	вЗаполнитьРазделСтруктураХранения();
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьРазделСтруктураХранения(Знач ДанныеСХ = Неопределено)
	Если ДанныеСХ = Неопределено Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(_ПолноеИмя);
		Если ОбъектМД <> Неопределено Тогда
			ДанныеСХ = ПолучитьСтруктуруХраненияБазыДанных(вЗначениеВМассив(ОбъектМД), не _ПоказыватьСтруктуруХраненияВТерминах1С);
			Если ДанныеСХ = Неопределено или ДанныеСХ.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НомерХ = 0;
	НомерХХ = 0;
	
	пСоотвИмен = новый Соответствие;
	
	Для каждого Стр из ДанныеСХ Цикл
		НомерХ = НомерХ + 1;
		НомерТаблицы = "(" + НомерХ +")";
		
		НС = _СХТаблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		НС.НомерТаблицы = НомерТаблицы;
		Если ПустаяСтрока(НС.ИмяТаблицы) Тогда
			НС.ИмяТаблицы = _ПолноеИмя + "(" + Стр.Назначение + ")";
		КонецЕсли;
		
		Для каждого СтрХ из Стр.Поля Цикл
			НС = _СХПоля.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрХ);
			НС.ИмяТаблицыХранения = Стр.ИмяТаблицыХранения;
			НС.НомерТаблицы = НомерТаблицы;
			
			Если не ПустаяСтрока(СтрХ.ИмяПоля) и пСоотвИмен[СтрХ.ИмяПоляХранения] = Неопределено Тогда
				пСоотвИмен.Вставить(СтрХ.ИмяПоляХранения, СтрХ.ИмяПоля);
			КонецЕсли;
		КонецЦикла;
		
		
		Для каждого СтрХ из Стр.Индексы Цикл
			НомерХХ = НомерХХ + 1;
			НомерИндекса = "(" + НомерХХ +")";
			
			НС = _СХИндексы.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрХ);
			НС.ИмяТаблицыХранения = Стр.ИмяТаблицыХранения;
			НС.НомерТаблицы = НомерТаблицы;
			НС.НомерИндекса = НомерИндекса;
			
			Для каждого СтрХХ из СтрХ.Поля Цикл
				НС = _СХПоляИндексов.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрХХ);
				НС.НомерИндекса = НомерИндекса;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если пСоотвИмен.Количество() <> 0 Тогда
		Если пСоотвИмен["Account"] = Неопределено Тогда
			пСоотвИмен["Account"] = "Счет";
		КонецЕсли;
		Если пСоотвИмен["_AccountRRef"] = Неопределено Тогда
			пСоотвИмен["_AccountRRef"] = "Счет";
		КонецЕсли;
		
		Для каждого Стр из _СХПоля.НайтиСтроки(новый Структура("ИмяПоля", "")) Цикл
			пЗначение = пСоотвИмен[Стр.ИмяПоляХранения];
			Если пЗначение <> Неопределено Тогда
				Стр.ИмяПоля = пЗначение;
			КонецЕсли;
		КонецЦикла;
		Для каждого Стр из _СХПоляИндексов.НайтиСтроки(новый Структура("ИмяПоля", "")) Цикл
			пЗначение = пСоотвИмен[Стр.ИмяПоляХранения];
			Если пЗначение <> Неопределено Тогда
				Стр.ИмяПоля = пЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СХТаблицыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Элементы._СХПоля.ОтборСтрок = новый ФиксированнаяСтруктура("НомерТаблицы", ТекДанные.НомерТаблицы);
		Элементы._СХИндексы.ОтборСтрок = новый ФиксированнаяСтруктура("НомерТаблицы", ТекДанные.НомерТаблицы);
	Иначе
		Элементы._СХПоля.ОтборСтрок = новый ФиксированнаяСтруктура("НомерТаблицы", "-1");
		Элементы._СХИндексы.ОтборСтрок = новый ФиксированнаяСтруктура("НомерТаблицы", "-1");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СХИндексыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Элементы._СХПоляИндексов.ОтборСтрок = новый ФиксированнаяСтруктура("НомерИндекса", ТекДанные.НомерИндекса);
	Иначе
		Элементы._СХПоляИндексов.ОтборСтрок = новый ФиксированнаяСтруктура("НомерИндекса", "-1");
	КонецЕсли;
КонецПроцедуры

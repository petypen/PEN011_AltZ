#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	КопироватьДанныеФормы(Параметры.Объект, Объект);

	Параметры.Свойство("ВЗапросРазрешено", ВЗапросРазрешено);
	Параметры.Свойство("ИмяПараметра", ИмяПараметра);

	ДеревоТипов = Неопределено;

	ТипЗначения = Параметры.ТипЗначения;

	Параметры.Свойство("СписокРазрешенных", СписокРазрешенных);

	Если Не Параметры.Свойство("ВПараметр", РежимВПараметр) Тогда
		РежимВПараметр = Ложь;
	КонецЕсли;

	Если РежимВПараметр Тогда
		РежимСтрокой = "В параметр";
		Элементы.КомандаОК.Заголовок = РежимСтрокой;
	Иначе
		РежимСтрокой = "Редактирование типа";
	КонецЕсли;

	Если Параметры.Свойство("Имя", ИмяПараметра) Тогда
		Заголовок = СтрШаблон("%1 (%2)", ИмяПараметра, НРег(РежимСтрокой));
	Иначе
		Заголовок = РежимСтрокой;
		ИмяПараметра = "ТаблицаЗначений";
	КонецЕсли;

	Если ТипЗнч(ТипЗначения) = Тип("Структура") И ТипЗначения.Тип = "Тип" Тогда

		Попытка
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(РеквизитФормыВЗначение("Объект").Контейнер_ВосстановитьЗначение(ТипЗначения));
			ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		Исключение
			ТипЗначения = Новый ОписаниеТипов();
		КонецПопытки;

		фПростойВид = Истина;
		фРедактированиеТипа = Истина;
		Элементы.СоставнойТип.Видимость = Ложь;
		Элементы.Контейнер.Видимость = Ложь;
		Элементы.ГруппаКвалификаторыДаты.Видимость = Ложь;
		Элементы.ГруппаКвалификаторыЧисла.Видимость = Ложь;
		Элементы.ГруппаКвалификаторыСтроки.Видимость = Ложь;

	ИначеЕсли ТипЗнч(ТипЗначения) = Тип("Тип") Тогда

		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗначения);
		ТипЗначения = Новый ОписаниеТипов(МассивТипов);

		фПростойВид = Истина;
		фРедактированиеТипа = Истина;
		Элементы.СоставнойТип.Видимость = Ложь;
		Элементы.Контейнер.Видимость = Ложь;
		Элементы.ГруппаКвалификаторыДаты.Видимость = Ложь;
		Элементы.ГруппаКвалификаторыЧисла.Видимость = Ложь;
		Элементы.ГруппаКвалификаторыСтроки.Видимость = Ложь;

	Иначе

		Если Не ЗначениеЗаполнено(ТипЗначения) Тогда
			ТипЗначения = Новый ОписаниеТипов();
		КонецЕсли;

		ТипКонтейнера = Неопределено;
		фПростойВид = Не Параметры.Свойство("ТипКонтейнера", ТипКонтейнера);

		Если фПростойВид Тогда
			ТипКонтейнера = 0;
			Элементы.Контейнер.Видимость = Ложь;
		КонецЕсли;

		Если ТипКонтейнера = 3 Тогда
				
				//Режим редактирования структуры таблицы. Таблицу можно передать с данными, они будут сохранены.
			Таблица = РеквизитФормыВЗначение("Объект").СтрокаВЗначение(ТипЗначения.Значение);
				
				//Сами данные на клиента не потащим.
			АдресТаблицы = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);

			ЗаполнитьСтруктуруТаблицы(Таблица);
			ТипЗначения = Новый ОписаниеТипов();

		КонецЕсли;

	КонецЕсли;

	СоставнойТип = ТипЗначения.Типы().Количество() > 1;

	КвалификаторыДатыСостав = ТипЗначения.КвалификаторыДаты.ЧастиДаты;
	КвалификаторыСтрокиДлина = ТипЗначения;
	КвалификаторыСтрокиФиксированная = ТипЗначения.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная;
	КвалификаторыЧислаДлина = ТипЗначения.КвалификаторыЧисла.Разрядность;
	КвалификаторыЧислаНеОтрицательный = ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный;
	КвалификаторыЧислаТочность = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;

	ДеревоЗначенийДляТипов = ПолучитьДеревоТипов(ТипЗначения, СписокРазрешенных);
	Если Не СоставнойТип И ТипКонтейнера = 0 Тогда
		ДобавитьМоментИГраницуВДерево(ДеревоЗначенийДляТипов, ТипЗначения);
	КонецЕсли;

	ДеревоТипов = ПоместитьВоВременноеХранилище(ДеревоЗначенийДляТипов, УникальныйИдентификатор);
	ОбновитьСоставТипаНаСервере();

	УстановитьВидимостьЭлементов();

	ТекущийЭлемент = Элементы.СтрокаПоиска;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоставнойТипПриИзменении(Элемент)

	ТекущееИмя = СоставнойТипПриИзмененииНаСервере();

	Если Не СоставнойТип Тогда
		СоставТипаСброситьВсеКроме(СоставТипа, ТекущееИмя);
	КонецЕсли;

	УстановитьСостояниеДереваТипов();

КонецПроцедуры

&НаКлиенте
Процедура КвалификаторыСтрокиДлинаПриИзменении(Элемент)
	ОбновитьОтображениеКвалификаторов();
КонецПроцедуры

&НаКлиенте
Процедура КонтейнерПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
	УстановитьСостояниеДереваТипов();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтрокаПоиска = Текст;
	СтандартнаяОбработка = Ложь;
	ОбновитьСоставТипа();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставТипа

&НаКлиенте
Процедура СоставТипаВыбранПриИзменении(Элемент)

	Если Не СоставнойТип Тогда
		СоставТипаСброситьВсеКроме(СоставТипа, Элементы.СоставТипа.ТекущиеДанные.Имя);
	КонецЕсли;

	Если Элементы.СоставТипа.ТекущиеДанные.Выбран Тогда
		Родитель = Элементы.СоставТипа.ТекущиеДанные.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Родитель.ВыбранПодч = Истина;
		КонецЕсли;
	КонецЕсли;

	ОбновитьОтображениеКвалификаторов();

КонецПроцедуры

&НаКлиенте
Процедура СоставТипаПриИзменении(Элемент)

	Если Элементы.СоставТипа.ТекущиеДанные.ЭтоГруппа Тогда

		Если СоставнойТип Тогда

			ЭлементыГруппы = СоставТипа.НайтиПоИдентификатору(Элементы.СоставТипа.ТекущаяСтрока).ПолучитьЭлементы();
			ВыбранРодитель = Элементы.СоставТипа.ТекущиеДанные.Выбран;
			Для Каждого Элемент Из ЭлементыГруппы Цикл
				Элемент.Выбран = ВыбранРодитель;
			КонецЦикла;

			Элементы.СоставТипа.ТекущиеДанные.ВыбранПодч = ВыбранРодитель;

		Иначе
			Элементы.СоставТипа.ТекущиеДанные.Выбран = Ложь;
			Элементы.СоставТипа.Развернуть(Элементы.СоставТипа.ТекущаяСтрока);
		КонецЕсли;

	Иначе

		Родитель = СоставТипа.НайтиПоИдентификатору(Элементы.СоставТипа.ТекущаяСтрока).ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда

			Если Элементы.СоставТипа.ТекущиеДанные.Выбран Тогда
				Родитель.ВыбранПодч = Истина;
			Иначе
				Родитель.ВыбранПодч = Ложь;
				ЭлементыГруппы = Родитель.ПолучитьЭлементы();
				Для Каждого Элемент Из ЭлементыГруппы Цикл
					Если Элемент.Выбран Тогда
						Родитель.ВыбранПодч = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставТипаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтображениеКвалификаторов", 0.1, Истина);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураТаблицы

&НаКлиенте
Процедура СтруктураТаблицыТипЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТипЗначения = Элементы.СтруктураТаблицы.ТекущиеДанные.ТипЗначения;

	ПараметрыОповещения = Новый Структура("Таблица, Строка, Поле", СтруктураТаблицы,
		Элементы.СтруктураТаблицы.ТекущаяСтрока, "ТипЗначения");
	ОписаниеОповещенияОЗакрытииОткрываемойФормы = Новый ОписаниеОповещения("ОкончаниеРедактированияТипа", ЭтотОбъект,
		ПараметрыОповещения);
	ПараметрыОткрытия = Новый Структура("Объект, ТипЗначения", Объект, ТипЗначения);
	ОткрытьФорму(ПолноеИмяФормы("РедактированиеТипа"), ПараметрыОткрытия, ЭтотОбъект, Истина, , ,
		ОписаниеОповещенияОЗакрытииОткрываемойФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураТаблицыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ОбработатьИзменениеИмениКолонки(НоваяСтрока, ОтменаРедактирования, Отказ);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВЗапрос(Команда)

	ТекстЗапроса = "";

	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ИмяПараметра", ИмяПараметра);
	ВозвращаемоеЗначение.Вставить("ТипКонтейнера", ТипКонтейнера);
	ВозвращаемоеЗначение.Вставить("ОписаниеКонтейнера", ПолучитьТаблицу(ТекстЗапроса));
	ВозвращаемоеЗначение.Вставить("ТекстЗапроса", ТекстЗапроса);

	Закрыть(ВозвращаемоеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)

	ВозвращаемоеЗначение = Новый Структура("ИмяПараметра, ТипКонтейнера, ОписаниеКонтейнера", ИмяПараметра,
		ТипКонтейнера, ПолучитьОписаниеТипов());

	Если ТипКонтейнера < 3 Тогда

		Если фРедактированиеТипа Тогда
			ВозвращаемоеЗначение.ОписаниеКонтейнера = ПолучитьКонтейнерТипа(ВозвращаемоеЗначение.ОписаниеКонтейнера);
		ИначеЕсли ВозвращаемоеЗначение.ОписаниеКонтейнера.СодержитТип(Тип("Граница"))
			Или ВозвращаемоеЗначение.ОписаниеКонтейнера.СодержитТип(Тип("МоментВремени")) Тогда
			ВозвращаемоеЗначение.ТипКонтейнера = 0;
		КонецЕсли;

	Иначе

		ВозвращаемоеЗначение.ОписаниеКонтейнера = ПолучитьТаблицу();

	КонецЕсли;

	Закрыть(ВозвращаемоеЗначение);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДеревоТиповВДанныеФормы(Узел, УзелРеквизита, ТекущаяСтрока = Неопределено, ВыбранПодч = Ложь)

	ЭлементыУзла = УзелРеквизита.ПолучитьЭлементы();

	Для Каждого Строка Из Узел.Строки Цикл

		Если Строка.Строки.Количество() > 0 Тогда

			СтрокаРеквизита = ЭлементыУзла.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Строка);
			СтрокаРеквизита.ВыбранПодч = Ложь;
			ДеревоТиповВДанныеФормы(Строка, СтрокаРеквизита, ТекущаяСтрока, СтрокаРеквизита.ВыбранПодч);

			Если СтрокаРеквизита.ПолучитьЭлементы().Количество() = 0 Тогда
				ЭлементыУзла.Удалить(СтрокаРеквизита);
			КонецЕсли;

		Иначе

			Если Не ЗначениеЗаполнено(СтрокаПоиска) Или Найти(ВРег(Строка.Представление), ВРег(СтрокаПоиска)) > 0
						//ИЛИ Найти(ВРег(Строка.Имя), ВРег(СтрокаПоиска)) > 0
			Тогда
				СтрокаРеквизита = ЭлементыУзла.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Строка);
				ВыбранПодч = ВыбранПодч Или Строка.Выбран;
			КонецЕсли;

		КонецЕсли;

		Если ТекущаяСтрока = Неопределено И СтрокаРеквизита <> Неопределено И Строка.Выбран Тогда
			ТекущаяСтрока = СтрокаРеквизита.ПолучитьИдентификатор();
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтметкиДерева(УзелДерева, УзелСоставаТипа)
	Перем ЭлементыУзла;

	Если УзелСоставаТипа <> Неопределено Тогда
		ЭлементыУзла = УзелСоставаТипа.ПолучитьЭлементы();
	КонецЕсли;

	Счетчик = 0;
	Для Каждого СтрокаДерева Из УзелДерева.Строки Цикл

		Если ЭлементыУзла = Неопределено Или ЭлементыУзла.Количество() <= Счетчик Тогда
			Если ФлагСброшеныВсе Тогда
				СтрокаДерева.Выбран = Ложь;
				Если СтрокаДерева.Строки.Количество() > 0 Тогда
					ОбновитьОтметкиДерева(СтрокаДерева, Неопределено);
				КонецЕсли;
				Продолжить;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;

		Если ФлагСброшеныВсе Тогда
			СтрокаДерева.Выбран = Ложь;
		КонецЕсли;

		Если ЭлементыУзла[Счетчик].Имя = СтрокаДерева.Имя Тогда

			СтрокаДерева.Выбран = ЭлементыУзла[Счетчик].Выбран;

			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ОбновитьОтметкиДерева(СтрокаДерева, ЭлементыУзла[Счетчик]);
			КонецЕсли;

			Счетчик = Счетчик + 1;

		КонецЕсли;

	КонецЦикла;

	ФлагСброшеныВсе = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставТипа() Экспорт
	ОбновитьСоставТипаНаСервере();
	УстановитьСостояниеДереваТипов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставТипаНаСервере()

	Дерево = ПолучитьИзВременногоХранилища(ДеревоТипов);
	ОбновитьОтметкиДерева(Дерево, СоставТипа);
	ПоместитьВоВременноеХранилище(Дерево, ДеревоТипов);

	ТекущаяСтрока = Неопределено;
	СоставТипа.ПолучитьЭлементы().Очистить();
	ДеревоТиповВДанныеФормы(Дерево, СоставТипа, ТекущаяСтрока);
	Элементы.СоставТипа.ТекущаяСтрока = ТекущаяСтрока;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеДереваТипов()
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Для Каждого Элемент Из СоставТипа.ПолучитьЭлементы() Цикл
			Элементы.СоставТипа.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеКвалификаторовТипа(ТипЗначения)

	МассивКвалификаторов = Новый Массив();

	Если ТипЗначения.СодержитТип(Тип("Строка")) Тогда
		ПредставлениеКвалификаторовСтроки = "Длина " + ТипЗначения.КвалификаторыСтроки.Длина;
		МассивКвалификаторов.Добавить(Новый Структура("Тип, Квалификаторы", "Строка",
			ПредставлениеКвалификаторовСтроки));
	КонецЕсли;

	Если ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		ПредставлениеКвалификаторовДаты = ТипЗначения.КвалификаторыДаты.ЧастиДаты;
		МассивКвалификаторов.Добавить(Новый Структура("Тип, Квалификаторы", "Дата", ПредставлениеКвалификаторовДаты));
	КонецЕсли;

	Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
		ПредставлениеКвалификаторовЧисла = "Знак " + ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак + " "
			+ ТипЗначения.КвалификаторыЧисла.Разрядность + "." + ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		МассивКвалификаторов.Добавить(Новый Структура("Тип, Квалификаторы", "Число", ПредставлениеКвалификаторовЧисла));
	КонецЕсли;

	ФлагНуженЗаголовок = МассивКвалификаторов.Количество() > 1;

	ПредставлениеКвалификаторовТипа = "";
	Для Каждого стКвалификаторы Из МассивКвалификаторов Цикл
		ПредставлениеКвалификаторовТипа = ПредставлениеКвалификаторовТипа + ?(ФлагНуженЗаголовок, стКвалификаторы.Тип
			+ ": ", "") + стКвалификаторы.Квалификаторы + "; ";
	КонецЦикла;

	Возврат ПредставлениеКвалификаторовТипа;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруТаблицы(Таблица)

	Для Каждого Колонка Из Таблица.Колонки Цикл
		СтрокаСтруктуры = СтруктураТаблицы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтруктуры, Колонка, "Имя, ТипЗначения");
		СтрокаСтруктуры.ИмяСтарое = Колонка.Имя;
		СтрокаСтруктуры.Квалификаторы = ПолучитьПредставлениеКвалификаторовТипа(Колонка.ТипЗначения);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйВыбранный(СоставТипа)

	Для Каждого СтрокаТипа Из СоставТипа.ПолучитьЭлементы() Цикл
		Если СтрокаТипа.ЭтоГруппа Тогда
			Результат = ПолучитьПервыйВыбранный(СтрокаТипа);
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		Иначе
			Если СтрокаТипа.Выбран Тогда
				Возврат СтрокаТипа.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаСервере
Функция СобратьТипы(СоставТипа, МассивТипов = Неопределено)

	Если МассивТипов = Неопределено Тогда
		МассивТипов = Новый Массив();
	КонецЕсли;

	Для Каждого СтрокаТипа Из СоставТипа.Строки Цикл
		Если СтрокаТипа.ЭтоГруппа Тогда
			МассивТипов = СобратьТипы(СтрокаТипа, МассивТипов);
		Иначе
			Если СтрокаТипа.Выбран Тогда
				МассивТипов.Добавить(Тип(СтрокаТипа.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат МассивТипов;

КонецФункции

&НаСервере
Функция ПолучитьОписаниеТипов()

	Дерево = ПолучитьИзВременногоХранилища(ДеревоТипов);
	ОбновитьОтметкиДерева(Дерево, СоставТипа);
	МассивТипов = СобратьТипы(Дерево);

	КвалификаторыЧисла = Новый КвалификаторыЧисла(КвалификаторыЧислаДлина, КвалификаторыЧислаТочность, ?(
		КвалификаторыЧислаНеОтрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой));
	КвалификаторыСтроки = Новый КвалификаторыСтроки(КвалификаторыСтрокиДлина, ?(КвалификаторыСтрокиФиксированная,
		ДопустимаяДлина.Фиксированная, ДопустимаяДлина.Переменная));
	КвалификаторыДаты = Новый КвалификаторыДаты(?(КвалификаторыДатыСостав = "Дата и время", ЧастиДаты.ДатаВремя,
		ЧастиДаты[КвалификаторыДатыСостав]));

	Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);

КонецФункции

&НаСервере
Функция ПолучитьКонтейнерТипа(ОписаниеТипов)

	Обработка = РеквизитФормыВЗначение("Объект");
	ВозвращаемыйТип = Тип("Неопределено");

	МассивТипов = ОписаниеТипов.Типы();
	Если МассивТипов.Количество() > 0 Тогда
		ВозвращаемыйТип = МассивТипов[0];
	КонецЕсли;

	Возврат Обработка.Контейнер_СохранитьЗначение(ВозвращаемыйТип);

КонецФункции

&НаСервере
Функция ПолучитьТаблицу(ТекстЗапроса = Неопределено)

	Обработка = РеквизитФормыВЗначение("Объект");

	ЕстьИзмененияКолонок = Ложь;
	СоответствиеКолонок = Новый Структура();
	ВыраженияКолонок = Новый Массив();
	Таблица = Новый ТаблицаЗначений();
	Для Каждого СтрокаСтруктуры Из СтруктураТаблицы Цикл

		Колонка = Таблица.Колонки.Добавить(СтрокаСтруктуры.Имя, СтрокаСтруктуры.ТипЗначения);

		ВыраженияКолонок.Добавить(СтрШаблон("	%1.%2 КАК %2", ИмяПараметра, Колонка.Имя));

		Если ЗначениеЗаполнено(СтрокаСтруктуры.ИмяСтарое) Тогда
			СоответствиеКолонок.Вставить(СтрокаСтруктуры.Имя, СтрокаСтруктуры.ИмяСтарое);
			ЕстьИзмененияКолонок = ЕстьИзмененияКолонок Или СтрокаСтруктуры.ИмяСтарое <> СтрокаСтруктуры.Имя;
		КонецЕсли;

	КонецЦикла;

	Если СоответствиеКолонок.Количество() > 0 Тогда

		СтараяТаблица = ПолучитьИзВременногоХранилища(АдресТаблицы);

		Если ЕстьИзмененияКолонок Тогда

			Для Каждого Строка Из СтараяТаблица Цикл
				СтрокаНовая = Таблица.Добавить();
				Для Каждого кз Из СоответствиеКолонок Цикл
					СтрокаНовая[кз.Ключ] = Строка[кз.Значение];
				КонецЦикла;
			КонецЦикла;

		Иначе
			Для Каждого Строка Из СтараяТаблица Цикл
				ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Строка);
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	ВыраженияКолонок = СтрСоединить(ВыраженияКолонок, ",
													  |");
	ТекстЗапроса = СтрШаблон("
							 |////////////////////////////////////////////////////////////////////////////////
							 |ВЫБРАТЬ
							 | %1
							 |ПОМЕСТИТЬ %2
							 |ИЗ &%2 КАК %2;", ВыраженияКолонок, ИмяПараметра);

	Возврат Обработка.Контейнер_СохранитьЗначение(Таблица);

КонецФункции

&НаКлиенте
Функция ПолноеИмяФормы(ИмяФормы)
	Возврат СтрШаблон("%1.Форма.%2", Объект.ПутьМетаданных, ИмяФормы);
КонецФункции

&НаСервере
Процедура ДобавитьМоментИГраницуВДерево(Дерево, ТипЗначенияТекущий = Неопределено)
	Перем Картинки;

	Если ТипЗначенияТекущий = Неопределено Тогда
		ТипЗначенияТекущий = Новый ОписаниеТипов();
	КонецЕсли;

	ДобавитьТип(Дерево, ТипЗначенияТекущий, "Граница", Картинки, "Граница", 4);
	ДобавитьТип(Дерево, ТипЗначенияТекущий, "МоментВремени", Картинки, "Момент времени", 5);

	фМоментГраница = Истина;

КонецПроцедуры

&НаСервере
Процедура ДобавитьМоментИГраницу()

	Дерево = ПолучитьИзВременногоХранилища(ДеревоТипов);
	ДобавитьМоментИГраницуВДерево(Дерево);
	ПоместитьВоВременноеХранилище(Дерево, ДеревоТипов);

	ОбновитьСоставТипаНаСервере();

КонецПроцедуры

&НаСервере
Процедура УбратьМоментИГраницуИзДерева(Дерево)

	Если Дерево.Строки[4].Имя = "Граница" Тогда
		Дерево.Строки.Удалить(Дерево.Строки[4]);
	КонецЕсли;

	Если Дерево.Строки[4].Имя = "МоментВремени" Тогда
		Дерево.Строки.Удалить(Дерево.Строки[4]);
	КонецЕсли;

	фМоментГраница = Ложь;

КонецПроцедуры

&НаСервере
Процедура УбратьМоментИГраницу()

	Дерево = ПолучитьИзВременногоХранилища(ДеревоТипов);
	ОбновитьОтметкиДерева(Дерево, СоставТипа);
	УбратьМоментИГраницуИзДерева(Дерево);
	ПоместитьВоВременноеХранилище(Дерево, ДеревоТипов);

	ТекущаяСтрока = Неопределено;
	СоставТипа.ПолучитьЭлементы().Очистить();
	ДеревоТиповВДанныеФормы(Дерево, СоставТипа, ТекущаяСтрока);
	Элементы.СоставТипа.ТекущаяСтрока = ТекущаяСтрока;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьМоментаИГраницы()

	Если ТипКонтейнера = 0 И Не СоставнойТип И (Не фПростойВид Или фРедактированиеТипа) Тогда
		Если Не фМоментГраница Тогда
			ДобавитьМоментИГраницу();
		КонецЕсли;
	Иначе
		Если фМоментГраница Тогда
			УбратьМоментИГраницу();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьТип(Дерево, ТипЗначенияТекущий, ИмяТипа, Картинки, ПредставлениеТипа = Неопределено,
	ИндексВставки = Неопределено)

	Если Картинки = Неопределено Тогда
		Картинки = ПолучитьИзВременногоХранилища(Объект.Картинки);
	КонецЕсли;

	Если ИндексВставки = Неопределено Тогда
		Строка = Дерево.Строки.Добавить();
	Иначе
		Строка = Дерево.Строки.Вставить(ИндексВставки);
	КонецЕсли;

	Строка.Имя = ИмяТипа;
	Если ТипЗнч(Картинки) = Тип("Картинка") Тогда
		Строка.Картинка = Картинки;
	Иначе
		Картинка = Неопределено;
		Если СтрНайти(ИмяТипа, ".") = 0 Тогда
			Если Картинки.Свойство("Тип_" + ИмяТипа, Картинка) Тогда
				Строка.Картинка = Картинка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПредставлениеТипа = Неопределено Тогда
		Строка.Представление = ИмяТипа;
	Иначе
		Строка.Представление = ПредставлениеТипа;
	КонецЕсли;

	Если ТипЗначенияТекущий.СодержитТип(Тип(ИмяТипа)) Тогда
		Строка.Выбран = Истина;
		Если Строка.Родитель <> Неопределено Тогда
			Строка.Родитель.ВыбранПодч = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, Менеджер, ПрефиксИмени, Картинки)
	Перем КартинкаСсылок;

	Картинки.Свойство("Тип_" + ПрефиксИмени, КартинкаСсылок);

	МассивТипов = Менеджер.ТипВсеСсылки().Типы();

	ВеткаТипов = Типы.Строки.Добавить();
	ВеткаТипов.Имя = ПрефиксИмени;
	ВеткаТипов.Представление = ПрефиксИмени + " (" + Формат(МассивТипов.Количество(), "ЧГ=0") + ")";
	ВеткаТипов.ЭтоГруппа = Истина;
	ВеткаТипов.Картинка = КартинкаСсылок;

	Для Каждого тТип Из МассивТипов Цикл
		Ссылка = Новый (тТип);
		стрИмяТипа = Ссылка.Метаданные().Имя;
		стрТип = ПрефиксИмени + "." + стрИмяТипа;
		ДобавитьТип(ВеткаТипов, ТипЗначенияТекущий, стрТип, КартинкаСсылок, стрИмяТипа);
		//ДобавитьТип(ВеткаТипов, ТипЗначенияТекущий, стрТип, КартинкаСсылок, Строка(тТип));
	КонецЦикла;

	ВеткаТипов.Строки.Сортировать("Представление");

КонецПроцедуры

&НаСервере
Функция ПолучитьДеревоТипов(ТипЗначенияТекущий, СписокРазрешенных)
	
	Картинки = Неопределено;

	Типы = Новый ДеревоЗначений();
	Типы.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	Типы.Колонки.Добавить("ВыбранПодч", Новый ОписаниеТипов("Булево"));
	Типы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Типы.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	Типы.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Типы.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));

	ДобавитьТип(Типы, ТипЗначенияТекущий, "Булево", Картинки);
	ДобавитьТип(Типы, ТипЗначенияТекущий, "Дата", Картинки);
	ДобавитьТип(Типы, ТипЗначенияТекущий, "Строка", Картинки);
	ДобавитьТип(Типы, ТипЗначенияТекущий, "Число", Картинки);
	ДобавитьТип(Типы, ТипЗначенияТекущий, "Null", Картинки);
	ДобавитьТип(Типы, ТипЗначенияТекущий, "ВидДвиженияНакопления", Картинки, "Вид движения накопления");
	ДобавитьТип(Типы, ТипЗначенияТекущий, "ВидДвиженияБухгалтерии", Картинки, "Вид движения бухгалтерии");
	ДобавитьТип(Типы, ТипЗначенияТекущий, "ВидСчета", Картинки, "Вид счета");
	ДобавитьТип(Типы, ТипЗначенияТекущий, "Тип", Картинки);
	ДобавитьТип(Типы, ТипЗначенияТекущий, "УникальныйИдентификатор", Картинки, "Уникальный идентификатор");

	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, Справочники, "СправочникСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, Документы, "ДокументСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, Перечисления, "ПеречислениеСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, ПланыВидовХарактеристик, "ПланВидовХарактеристикСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, ПланыСчетов, "ПланСчетовСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, ПланыВидовРасчета, "ПланВидовРасчетаСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, БизнесПроцессы, "БизнесПроцессСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, Задачи, "ЗадачаСсылка", Картинки);
	ДобавитьТипыСсылок(Типы, ТипЗначенияТекущий, ПланыОбмена, "ПланОбменаСсылка", Картинки);

	Возврат Типы;

КонецФункции

&НаКлиенте
Процедура СоставТипаСброситьВсеКроме(Узел, ИмяКроме)

	СтрокаКроме = Неопределено;
	Для Каждого Строка Из Узел.ПолучитьЭлементы() Цикл

		Если Строка.Имя <> ИмяКроме Тогда
			Строка.Выбран = Ложь;
			Строка.ВыбранПодч = Ложь;
			СоставТипаСброситьВсеКроме(Строка, ИмяКроме);
		Иначе
			СтрокаКроме = Строка;
		КонецЕсли;

	КонецЦикла;

	Если СтрокаКроме <> Неопределено И СтрокаКроме.Выбран Тогда
		Родитель = Строка.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда
			Родитель.ВыбранПодч = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Мы сбросили все в урезанном дереве на клиенте. В сеансовых данных остались пометки, они уже не действительны.
	//Когда будем на сервере, сбросим их перед обновлением отметок. Для этого этот флаг.
	ФлагСброшеныВсе = Истина;

КонецПроцедуры

&НаСервере
Функция СоставнойТипПриИзмененииНаСервере()

	ТекущееИмя = Неопределено;

	Если СоставнойТип Тогда
		УстановитьВидимостьЭлементов();
	Иначе
		ТекущееИмя = ПолучитьПервыйВыбранный(СоставТипа);
		УстановитьВидимостьЭлементов();
	КонецЕсли;

	Возврат ТекущееИмя;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов()

	Таблица = ТипКонтейнера = 3;
	Элементы.ГруппаТипЗначения.Видимость = Не Таблица;
	Элементы.ГруппаРедактированиеТаблицы.Видимость = Таблица;
	Элементы.КомандаВЗапрос.Видимость = Таблица И ВЗапросРазрешено;

	Если Не Таблица Тогда
		УстановитьВидимостьМоментаИГраницы();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеИмениКолонки(НоваяСтрока, ОтменаРедактирования, Отказ)

	ИмяКолонки = Элементы.СтруктураТаблицы.ТекущиеДанные.Имя;

	ИмяКорректно = Ложь;
	
	Попытка
		ст = Новый Структура(ИмяКолонки);
		ИмяКорректно = ЗначениеЗаполнено(ИмяКолонки);
	Исключение
	КонецПопытки;

	Если Не ИмяКорректно Тогда
		ПоказатьПредупреждение( ,
			"Неверное имя колонки! Имя должно состоять из одного слова, начинаться с буквы и не содержать специальных символов кроме ""_"".",
			, Заголовок);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	СтрокиИмени = СтруктураТаблицы.НайтиСтроки(Новый Структура("Имя", ИмяКолонки));
	Если СтрокиИмени.Количество() > 1 Тогда
		ПоказатьПредупреждение( , "Колонка с таким именем уже есть! Введите другое имя.", , Заголовок);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКвалификаторов() Экспорт

	Если Не фРедактированиеТипа Тогда

		ВидимостьКвалификаторовЧисла = Элементы.СоставТипа.ТекущиеДанные <> Неопределено
			И Элементы.СоставТипа.ТекущиеДанные.Выбран И Элементы.СоставТипа.ТекущиеДанные.Имя = "Число";
		ВидимостьКвалификаторовСтроки = Элементы.СоставТипа.ТекущиеДанные <> Неопределено
			И Элементы.СоставТипа.ТекущиеДанные.Выбран И Элементы.СоставТипа.ТекущиеДанные.Имя = "Строка";
		ВидимостьКвалификаторовДаты = Элементы.СоставТипа.ТекущиеДанные <> Неопределено
			И Элементы.СоставТипа.ТекущиеДанные.Выбран И Элементы.СоставТипа.ТекущиеДанные.Имя = "Дата";

		Элементы.ГруппаКвалификаторыЧисла.Видимость = ВидимостьКвалификаторовЧисла;
		Элементы.ГруппаКвалификаторыСтроки.Видимость = ВидимостьКвалификаторовСтроки;
		Элементы.ГруппаКвалификаторыДаты.Видимость = ВидимостьКвалификаторовДаты;

		Если ВидимостьКвалификаторовСтроки Тогда
			Если КвалификаторыСтрокиДлина = 0 Тогда
				КвалификаторыСтрокиКомментарий = "(неограниченная)";
				Элементы.КвалификаторыСтрокиФиксированная.Видимость = Ложь;
			Иначе
				КвалификаторыСтрокиКомментарий = "";
				Элементы.КвалификаторыСтрокиФиксированная.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРедактированияТипа(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда

		СтрокаСтруктуры = ДополнительныеПараметры.Таблица.НайтиПоИдентификатору(ДополнительныеПараметры.Строка);
		СтрокаСтруктуры.ТипЗначения = РезультатЗакрытия.ОписаниеКонтейнера;
		СтрокаСтруктуры.Квалификаторы = ПолучитьПредставлениеКвалификаторовТипа(РезультатЗакрытия.ОписаниеКонтейнера);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти